@page "/Connexion"
@using System.ComponentModel.DataAnnotations
@using Deliberation.Models
@using MySql.Data.MySqlClient
@using System.Data
@using Deliberation.Services
@using Deliberation.Resources
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> L
@inject LanguageService LanguageService
@using System.Globalization

<LanguageSwitch />

<div class="container-2">
    <div class="container-1">
        <div class="logo"><img src="logo.png" width="60px" height="60px"></div>
        <h1>ICTFORD</h1>
        <div class="logo"><img src="logo.png" width="60px" height="60px"></div>
    </div>
    <h6>@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Bienvenue dans ICTFORD l'interface de gestion la plus adaptée et la mieux orientée étudiante" : "Welcome to ICTFORD the most suitable and student-oriented management interface")</h6>
</div>
<div class="container">
    <h3 style="color :black; font-family :Stylish Calligraphy Demo;">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "A quelques pas d'en profiter" : "Just a few steps from enjoying")</h3>
    @if (_currentForm == "login")
    {
        <div class="form-container">
            <h2 class="form-title">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Connexion" : "Login")</h2>
            <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="form-group">        
                    <label for="username">Nom d'utilisateur</label>
                    <InputText id="username" @bind-Value="_loginModel.Username" class="form-control" required />
                    <ValidationMessage For="@(() => _loginModel.Username)" />
                </div>
                <div class="form-group">
                    <label for="password">Mot de passe</label>
                    <InputText id="password" @bind-Value="_loginModel.Password" type="password" class="form-control" required />
                    <ValidationMessage For="@(() => _loginModel.Password)" />
                </div>
                <button type="submit" onclick="" class="submit-btn">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Se connecter" : "Login")</button>
                <div class="switch-form">
                    <a href="#" @onclick="ShowRegisterForm" @onclick:preventDefault>
                        @(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Pas encore inscrit ? S'inscrire" : "Not registered yet? Sign up")
                    </a>
                    <a href="#" @onclick="ShowResetForm" @onclick:preventDefault>
                        @(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Code oublié ?" : "Forgot code?")
                    </a>
                </div>
            </EditForm>
        </div>
    }
    else if (_currentForm == "register")
    {
        <div class="form-container">
            <h2 class="form-title">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Inscription" : "Registration")</h2>
            <EditForm Model="@_registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="registerFirstName">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Prénom" : "First Name")</label>
                    <InputText id="registerFirstName" @bind-Value="_registerModel.FirstName" />
                    <ValidationMessage For="@(() => _registerModel.FirstName)" />
                </div>
                <div class="form-group">
                    <label for="registerLastName">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Nom" : "Name")</label>
                    <InputText id="registerLastName" @bind-Value="_registerModel.LastName" />
                    <ValidationMessage For="@(() => _registerModel.LastName)" />
                </div>
                <div class="form-group">
                    <label for="registerDateOfBirth">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Date De Naissance" : "Date Of Birth")</label>
                    <InputDate id="registerDateOfBirth" @bind-Value="_registerModel.DateOfBirth" />
                    <ValidationMessage For="@(() => _registerModel.DateOfBirth)" />
                </div>
                <div class="form-group">
                    <label for="registerEmail">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Email" : "Email")</label>
                    <InputText id="registerEmail" @bind-Value="_registerModel.Email" />
                    <ValidationMessage For="@(() => _registerModel.Email)" />
                </div>
                <div class="form-group">
                    <label for="registerBirthCity">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Ville de Naissance" : "Birth City")</label>
                    <InputText id="registerBirthCity" @bind-Value="_registerModel.BirthCity" />
                    <ValidationMessage For="@(() => _registerModel.BirthCity)" />
                </div>
                <div class="form-group">
                    <label for="registerUsername">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Nom d'utilisateur" : "Username")</label>
                    <InputText id="registerUsername" @bind-Value="_registerModel.Username" />
                    <ValidationMessage For="@(() => _registerModel.Username)" />
                </div>
                <div class="form-group">
                    <label for="registerPassword">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Mot de passe" : "Password")</label>
                    <InputText id="registerPassword" @bind-Value="_registerModel.Password" type="password" />
                    <ValidationMessage For="@(() => _registerModel.Password)" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Confirmer le mot de passe" : "Confirm Password")</label>
                    <InputText id="confirmPassword" @bind-Value="_registerModel.ConfirmPassword" type="password" />
                    <ValidationMessage For="@(() => _registerModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="submit-btn">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "S'inscrire" : "Register")</button>
                <div class="switch-form">
                    <a href="#" @onclick="ShowLoginForm" @onclick:preventDefault>
                        @(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Déjà inscrit ? Se connecter" : "Already registered? Login")
                    </a>
                </div>
            </EditForm>
        </div>
    }
    else if (_currentForm == "reset")
    {
        <div class="form-container">
            <h2 class="form-title">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Réinitialisation du mot de passe" : "Reset Password")</h2>
            <EditForm Model="@_resetModel" OnValidSubmit="HandleReset">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="resetEmail">Email</label>
                    <InputText id="resetEmail" @bind-Value="_resetModel.Email" />
                    <ValidationMessage For="@(() => _resetModel.Email)" />
                </div>
                <button type="submit" class="submit-btn">@(LanguageService.CurrentCulture.Name.StartsWith("fr") ? "Envoyer le code de réinitialisation" : "Send reset code")</button>
            </EditForm>
        </div>
    }
</div>

@code {
    private string _currentForm = "login";
    private LoginModel _loginModel = new();
    private RegisterModel _registerModel = new();
    private ResetModel _resetModel = new();

    private void ShowLoginForm()
    {
        _currentForm = "login";
    }

    private void ShowRegisterForm()
    {
        _currentForm = "register";
    }

    private void ShowResetForm()
    {
        _currentForm = "reset";
    }

    private async Task HandleLogin()
    {
        // Implémentez la logique de connexion ici
        bool isAuthenticated = await AuthenticateUser(_loginModel.Username, _loginModel.Password);
        
        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/DeliberationPV"); // Rediriger vers une page de succès
        }
    }

    private async Task HandleRegister()
    {
        // Implémentez la logique d'inscription ici
        bool isRegistered = await RegisterUser(_registerModel.Username, _registerModel.Password);
        
        if (isRegistered)
        {
            ShowLoginForm(); // Retour à la page de connexion après une inscription réussie
        }
    }

    private async Task HandleReset()
    {
        // Implémentez la logique de réinitialisation ici
    }

    private async Task<bool> AuthenticateUser(string username, string password)
    {
        string connexionInfo = "server=localhost;database=bonita;user=root;password='';";
        bool connecter = false;
        using (MySqlConnection conn = new MySqlConnection(connexionInfo))
        {
            conn.Open();
            string commandText = "SELECT * FROM users where Username = @username";
            using (MySqlCommand command = new MySqlCommand(commandText, conn))
            {
                command.Parameters.AddWithValue("@username", username);
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if(password == reader["password_u"].ToString()){
                            connecter = true;
                        }
                        break;
                    }
                }
            }
        }
        return connecter;
    }

    private async Task<bool> RegisterUser(string username, string password)
    {
        // Logique d'inscription à implémenter
        return true; // Exemple simple, retournez true si l'inscription réussit
    }
    protected override void OnInitialized()
    {
        LanguageService.CurrentCulture = new CultureInfo("fr-FR");
        LanguageService.LanguageChanged += StateHasChanged;
    }
/*
    private Task<bool> Connexion(){
        string connexionInfo = "server=localhost;database=bonita;user=root;password='';";
        using (MySqlConnection conn = new MySqlConnection(connexionInfo))
        {
            conn.Open();
            //string commandText = "SELECT";

            using (MySqlCommand command = new MySqlCommand(commandText, conn))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    List<Etudiant> listeEtudiants = new List<Etudiant>();
                    while (reader.Read())
                    {

                    }
                    return true;
                }
            }
        }
    }*/

}